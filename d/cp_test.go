package d

import ("testing"
	"github.com/magiconair/properties/assert"
	"encoding/hex"
	"fmt"
)

func TestCP_D_Function_Compute(t *testing.T) {

	var i uint32
	for ; i < 10 ; i++ {
		if (i & 1) == 1 {
			println("Hello, World! i = %i\n", i)

		}
	}

}
type testHashValue struct{
	in []byte
	out []byte
}
var testsData = []testHashValue{
	{
		[]byte{0xa4, 0xc4, 0x11, 0xc5, 0x4d, 0x94, 0x72, 0x71, 0x43, 0x50, 0x4a, 0xec, 0xe5, 0x61,0x3d, 0xa8, 0xc6, 0xee, 0x6d, 0xd2},
		[]byte{0x3a, 0x24, 0xa0, 0x68, 0xc1, 0x16,0x84, 0x2f, 0x10, 0xfa, 0xc5, 0xc8, 0x6c, 0xb1,0xcb, 0x5c},
	},
	{
		[]byte{0xee, 0x81, 0x0d, 0xd5, 0x77, 0x9c,0xe5, 0x0a, 0xa8, 0xdf, 0x38, 0x24, 0xb3, 0xf2,0x59, 0x4c, 0xf9, 0xee, 0x68, 0xa9},
		[]byte{0x93, 0xc8, 0x2d, 0xc4, 0xd1, 0xc4,0xa3, 0x38, 0x89, 0x6b, 0xfc, 0xe2, 0xe7, 0xdc,0x12, 0xa0},
	},
}


func TestCP_D_Function_ComputeHashValue(t *testing.T) {
	d:= CP_D_Function{}
	for _,test :=range testsData{
		actualOut:=d.ComputeHashValue(test.in,uint32(len(test.in)))

		dst := make([]byte, hex.EncodedLen(len(actualOut)))
		hex.Encode(dst, actualOut)
		fmt.Printf("%s\n", dst)
		assert.Equal(t,actualOut,test.out)
	}
}