package ksm

import (
	"io/ioutil"
	"os"
	"testing"

	"github.com/stretchr/testify/assert"
)

type spcTest struct {
	filePath      string
	outFilePath string
	playload_size int
	iv            []byte
	encrypted_key []byte

	ttls []TLLVBlock
}

var spcContainerTests = []spcTest{
	{"testdata/spc1.bin",
	"testdata/o-cpc1.bin",
		2688,
		[]byte{0x5d, 0x16, 0x44, 0xea, 0xec, 0x11, 0xf9, 0x83, 0x14, 0x75, 0x41, 0xe4, 0x6e, 0xeb, 0x27, 0x74},
		[]byte{0x92, 0x66, 0x48, 0xb9, 0x86, 0x1e, 0xc0, 0x47, 0x1b, 0xa2, 0x17, 0x58, 0x85, 0x1c, 0x3d, 0xda, 0x31, 0xc9, 0x3b, 0x1d, 0xd6, 0x1, 0xaa, 0x4e, 0xad, 0x44, 0x15, 0xa2, 0x7, 0x59, 0xaa, 0xb9, 0xa6, 0xd8, 0x9f, 0x55, 0x13, 0x85, 0x85, 0x6e, 0x73, 0x57, 0x17, 0x29, 0xdf, 0x2f, 0x1d, 0x46, 0xd2, 0x5c, 0x13, 0xda, 0x2a, 0xd7, 0x5d, 0x0, 0xfd, 0x34, 0x13, 0xeb, 0xd9, 0x6c, 0xa4, 0x7d, 0x2, 0x95, 0x5c, 0x56, 0x9f, 0x7f, 0xab, 0x40, 0xf1, 0xa7, 0xfb, 0x23, 0x41, 0x41, 0x67, 0xa6, 0x53, 0xea, 0xbd, 0xf1, 0xad, 0x28, 0x3d, 0xf5, 0xe0, 0x7e, 0x7c, 0xf4, 0xaa, 0x2f, 0xba, 0xc6, 0x4f, 0x1d, 0x46, 0xf, 0xdf, 0x9a, 0x21, 0xee, 0xb2, 0x7a, 0x7f, 0x60, 0x72, 0x78, 0x53, 0xa4, 0x14, 0xc1, 0xc4, 0x50, 0xc5, 0x25, 0xe8, 0xda, 0xb6, 0xa3, 0xf1, 0x3c, 0xfa, 0x57, 0x17, 0x1a},

		[]TLLVBlock{
			{
				Tag:         Tag_SessionKey_R1_integrity,
				BlockLength: 0x40,
				ValueLength: 0x10,
				Value:       []byte{0x54, 0xa1, 0x6b, 0xe0, 0x13, 0x7e, 0xf2, 0x59, 0xab, 0x3e, 0x4f, 0xc7, 0x96, 0x90, 0x82, 0x5f},
			},
			{
				Tag:         Tag_SessionKey_R1,
				BlockLength: 0x100,
				ValueLength: 0x70,
				Value:       []byte{0x4f, 0x45, 0xd8, 0x5c, 0xe2, 0x62, 0x73, 0x10, 0x1a, 0x97, 0xf3, 0x30, 0x81, 0xc1, 0xd0, 0x4a, 0x93, 0xb2, 0xdd, 0x3, 0x55, 0xe3, 0x63, 0x72, 0x9d, 0x92, 0xa4, 0x5a, 0x45, 0xce, 0x8d, 0x25, 0x8b, 0xc, 0x8, 0xaa, 0x65, 0x1c, 0x9, 0x64, 0x97, 0x6b, 0xf0, 0x94, 0x4d, 0x28, 0x25, 0xf3, 0xac, 0x8d, 0xde, 0x7e, 0xd2, 0x31, 0x4f, 0xa0, 0xef, 0x3f, 0xb4, 0x5b, 0x97, 0xa2, 0x26, 0xe8, 0xc5, 0x36, 0x6d, 0xef, 0xe5, 0xf1, 0xe1, 0x2b, 0xd7, 0xb7, 0x21, 0x98, 0xa4, 0xa8, 0xf2, 0x65, 0x3a, 0xe, 0xf0, 0xde, 0x8c, 0x37, 0xa4, 0x7c, 0x3c, 0x40, 0xf0, 0x12, 0xe1, 0x5c, 0x8b, 0x59, 0x3d, 0xf1, 0x2d, 0x4b, 0x1, 0x60, 0x3a, 0x97, 0x35, 0x7e, 0x6a, 0xe0, 0xa1, 0x1c, 0xa3, 0xe3},
			},
			{
				Tag:         Tag_AntiReplaySeed,
				BlockLength: 0xd0,
				ValueLength: 0x10,
				Value:       []byte{0xf3, 0xc6, 0x9d, 0x1e, 0x8c, 0xc4, 0x27, 0x5a, 0x6d, 0x32, 0x86, 0xd3, 0x32, 0x61, 0x3e, 0x13},
			},
			{
				Tag:         Tag_R2,
				BlockLength: 0xb0,
				ValueLength: 0x15,
				Value:       []byte{0x11, 0xf7, 0xbe, 0x61, 0x2c, 0xa9, 0x5e, 0xf5, 0xe0, 0x7, 0xce, 0x51, 0x89, 0x6a, 0xe4, 0x50, 0x2c, 0xa3, 0xd8, 0x80, 0x1b},
			},
			{
				Tag:         Tag_AssetID,
				BlockLength: 0x80,
				ValueLength: 0x12,
				Value:       []byte{0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff},
			},
			{
				Tag:         Tag_TransactionID,
				BlockLength: 0x70,
				ValueLength: 0x8,
				Value:       []byte{0x14, 0x73, 0xe5, 0xcc, 0x53, 0xe1, 0xe5, 0xd6},
			},
			{
				Tag:         Tag_ProtocolVersionUsed,
				BlockLength: 0xc0,
				ValueLength: 0x4,
				Value:       []byte{0x0, 0x0, 0x0, 0x1},
			},
			{
				Tag:         Tag_ProtocolVersionsSupported,
				BlockLength: 0xa0,
				ValueLength: 0x4,
				Value:       []byte{0x0, 0x0, 0x0, 0x1},
			},
			{
				Tag:         Tag_ReturnRequest,
				BlockLength: 0x60,
				ValueLength: 0x38,
				Value:       []byte{0x1b, 0xf7, 0xf5, 0x3f, 0x5d, 0x5d, 0x5a, 0x1f, 0x47, 0xaa, 0x7a, 0xd3, 0x44, 0x5, 0x77, 0xde, 0xf9, 0x11, 0xf0, 0x4d, 0xa5, 0x4b, 0xf5, 0x99, 0xba, 0x8, 0xcc, 0x74, 0xda, 0xc9, 0x17, 0x6d, 0x13, 0xd, 0x99, 0x4c, 0xb8, 0x94, 0xb9, 0xe3, 0x66, 0xc8, 0x23, 0xf3, 0x79, 0xb8, 0x7b, 0xb5, 0x18, 0xd4, 0x2c, 0x5f, 0x8e, 0x54, 0x5a, 0x4b},
			},
		},
	},
}

func TestGenCKC(t *testing.T) {
	for _, test := range spcContainerTests {
		spcMessage := readSPCMessage(test.filePath)

		ckc, err := GenCKC(spcMessage)
		assert.NoError(t, err)

		assert.NoError(t, ioutil.WriteFile(test.outFilePath,ckc,0777))
	}
}

func TestParseSPCContainer(t *testing.T) {
	for _, test := range spcContainerTests {
		spcMessage := readSPCMessage(test.filePath)

		spcContainer := ParseSPCContainer(spcMessage)

		assert.Equal(t, test.playload_size, len(spcContainer.SPCPlayload))
		assert.Equal(t, test.playload_size, int(spcContainer.SPCPlayloadLength))
		assert.Equal(t, test.encrypted_key, spcContainer.EncryptedAesKey)
		assert.Equal(t, test.iv, spcContainer.AesKeyIV)
	}
}

func TestParseSPCV1(t *testing.T) {
	//FileReader:=rsa.FileReader{FileName:"testdata/Development Credentials/dev_private_key.pem"}
	pem := []byte{} //TODO: server pk

	for _, test := range spcContainerTests {
		spcMessage := readSPCMessage(test.filePath)

		spcContainer, err := ParseSPCV1(spcMessage, pem)
		assert.NoError(t, err)

		assert.Equal(t, test.encrypted_key, spcContainer.EncryptedAesKey)
		assert.Equal(t, test.iv, spcContainer.AesKeyIV)
		assert.Equal(t, test.playload_size, len(spcContainer.SPCPlayload))

		for _, tllv := range test.ttls {
			actualTtlv := spcContainer.TTLVS[tllv.Tag]
			assert.NotNil(t, actualTtlv)
			assert.Equal(t, tllv, actualTtlv)
		}
	}
}

func readSPCMessage(filePath string) []byte {
	f, err := os.Open(filePath)
	defer f.Close()
	checkErr(err)

	spcMessage, err := ioutil.ReadAll(f)
	checkErr(err)

	return spcMessage

}

func checkErr(err error) {
	if err != nil {
		panic(err)
	}
}
